-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.9 from bottomUp.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_bottomUp -> E                               (0)
	E -> E '+' T                                       (1)
	E -> E '-' T                                       (2)
	E -> T                                             (3)
	T -> T '*' F                                       (4)
	T -> T '/' F                                       (5)
	T -> F                                             (6)
	F -> '(' E ')'                                     (7)
	F -> int                                           (8)
	F -> id                                            (9)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'+'            { LexPlus }
	'-'            { LexMinus }
	'*'            { LexMul }
	'/'            { LexDiv }
	'('            { LexLParen }
	')'            { LexRParen }
	int            { LexInt $$ }
	id             { LexId $$ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_bottomUp rule  0
	E               rules 1, 2, 3
	T               rules 4, 5, 6
	F               rules 7, 8, 9

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'('            shift, and enter state 5
	int            shift, and enter state 6
	id             shift, and enter state 7

	E              goto state 8
	T              goto state 3
	F              goto state 4

State 1


	'('            shift, and enter state 5
	int            shift, and enter state 6
	id             shift, and enter state 7

	E              goto state 2
	T              goto state 3
	F              goto state 4

State 2

	E -> E . '+' T                                      (rule 1)
	E -> E . '-' T                                      (rule 2)

	'+'            shift, and enter state 9
	'-'            shift, and enter state 10


State 3

	E -> T .                                            (rule 3)
	T -> T . '*' F                                      (rule 4)
	T -> T . '/' F                                      (rule 5)

	'+'            reduce using rule 3
	'-'            reduce using rule 3
	'*'            shift, and enter state 12
	'/'            shift, and enter state 13
	')'            reduce using rule 3
	%eof           reduce using rule 3


State 4

	T -> F .                                            (rule 6)

	'+'            reduce using rule 6
	'-'            reduce using rule 6
	'*'            reduce using rule 6
	'/'            reduce using rule 6
	')'            reduce using rule 6
	%eof           reduce using rule 6


State 5

	F -> '(' . E ')'                                    (rule 7)

	'('            shift, and enter state 5
	int            shift, and enter state 6
	id             shift, and enter state 7

	E              goto state 11
	T              goto state 3
	F              goto state 4

State 6

	F -> int .                                          (rule 8)

	'+'            reduce using rule 8
	'-'            reduce using rule 8
	'*'            reduce using rule 8
	'/'            reduce using rule 8
	')'            reduce using rule 8
	%eof           reduce using rule 8


State 7

	F -> id .                                           (rule 9)

	'+'            reduce using rule 9
	'-'            reduce using rule 9
	'*'            reduce using rule 9
	'/'            reduce using rule 9
	')'            reduce using rule 9
	%eof           reduce using rule 9


State 8

	%start_bottomUp -> E .                              (rule 0)
	E -> E . '+' T                                      (rule 1)
	E -> E . '-' T                                      (rule 2)

	'+'            shift, and enter state 9
	'-'            shift, and enter state 10
	%eof           accept


State 9

	E -> E '+' . T                                      (rule 1)

	'('            shift, and enter state 5
	int            shift, and enter state 6
	id             shift, and enter state 7

	T              goto state 18
	F              goto state 4

State 10

	E -> E '-' . T                                      (rule 2)

	'('            shift, and enter state 5
	int            shift, and enter state 6
	id             shift, and enter state 7

	T              goto state 17
	F              goto state 4

State 11

	E -> E . '+' T                                      (rule 1)
	E -> E . '-' T                                      (rule 2)
	F -> '(' E . ')'                                    (rule 7)

	'+'            shift, and enter state 9
	'-'            shift, and enter state 10
	')'            shift, and enter state 16


State 12

	T -> T '*' . F                                      (rule 4)

	'('            shift, and enter state 5
	int            shift, and enter state 6
	id             shift, and enter state 7

	F              goto state 15

State 13

	T -> T '/' . F                                      (rule 5)

	'('            shift, and enter state 5
	int            shift, and enter state 6
	id             shift, and enter state 7

	F              goto state 14

State 14

	T -> T '/' F .                                      (rule 5)

	'+'            reduce using rule 5
	'-'            reduce using rule 5
	'*'            reduce using rule 5
	'/'            reduce using rule 5
	')'            reduce using rule 5
	%eof           reduce using rule 5


State 15

	T -> T '*' F .                                      (rule 4)

	'+'            reduce using rule 4
	'-'            reduce using rule 4
	'*'            reduce using rule 4
	'/'            reduce using rule 4
	')'            reduce using rule 4
	%eof           reduce using rule 4


State 16

	F -> '(' E ')' .                                    (rule 7)

	'+'            reduce using rule 7
	'-'            reduce using rule 7
	'*'            reduce using rule 7
	'/'            reduce using rule 7
	')'            reduce using rule 7
	%eof           reduce using rule 7


State 17

	E -> E '-' T .                                      (rule 2)
	T -> T . '*' F                                      (rule 4)
	T -> T . '/' F                                      (rule 5)

	'+'            reduce using rule 2
	'-'            reduce using rule 2
	'*'            shift, and enter state 12
	'/'            shift, and enter state 13
	')'            reduce using rule 2
	%eof           reduce using rule 2


State 18

	E -> E '+' T .                                      (rule 1)
	T -> T . '*' F                                      (rule 4)
	T -> T . '/' F                                      (rule 5)

	'+'            reduce using rule 1
	'-'            reduce using rule 1
	'*'            shift, and enter state 12
	'/'            shift, and enter state 13
	')'            reduce using rule 1
	%eof           reduce using rule 1


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 10
Number of terminals: 8
Number of non-terminals: 4
Number of states: 19
